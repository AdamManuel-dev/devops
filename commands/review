#!/bin/bash

# Review Orchestrator - Git-Workflow-Aligned Automated Code Review & Improvement System
# Usage: /review [git-command] [directory]

set -euo pipefail

# Configuration - can be overridden via environment variables
NOTIFICATION_SCRIPT="${NOTIFICATION_SCRIPT:-/Users/adammanuel/.claude/tools/send-notification.sh}"
CLAUDE_COMMAND="${CLAUDE_COMMAND:-claude}"
REVIEW_TIMEOUT="${REVIEW_TIMEOUT:-300}" # 5 minutes default timeout

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Progress emojis
STAGE1_EMOJI="🟡"
STAGE2_READ_EMOJI="🟢"
STAGE2_QUAL_EMOJI="🔵"
STAGE2_SEC_EMOJI="🔴"
STAGE3_DESIGN_EMOJI="🟣"
STAGE3_TEST_EMOJI="🧪"
STAGE4_E2E_EMOJI="🔵"
STAGE4_FINAL_EMOJI="📝"

# Function to display the header
show_header() {
    local mode="$1"
    echo
    echo "╔══════════════════════════════════════════════════════════════════════════╗"
    echo "║                   🎯 Review Orchestrator - ${mode^} Mode                 ║"
    echo "╚══════════════════════════════════════════════════════════════════════════╝"
    echo
}

# Function to parse command arguments
parse_command() {
    local input="$*"
    local git_commands=("add" "commit" "push" "merge")
    local git_command=""
    local directory="."
    local stages=()
    
    # Parse arguments
    for arg in $input; do
        if [[ " ${git_commands[*]} " =~ " ${arg} " ]]; then
            git_command="$arg"
        elif [[ "$arg" != "review" ]] && [[ ! " ${git_commands[*]} " =~ " ${arg} " ]]; then
            directory="$arg"
        fi
    done
    
    # Determine stages based on git command
    case "$git_command" in
        "add")
            stages=(1)
            ;;
        "commit")
            stages=(1 2)
            ;;
        "push")
            stages=(1 2 3)
            ;;
        "merge")
            stages=(1 2 3 4)
            ;;
        *)
            stages=(1)  # Default: basic review only
            ;;
    esac
    
    echo "$git_command|$directory|${stages[*]}"
}

# Function to show progress dashboard
show_progress() {
    local stages="$1"
    local directory="$2"
    local git_command="$3"
    local current_stage="$4"
    local stage1_status="${5:-⏳}"
    local stage2_status="${6:-⏳}"
    local stage3_status="${7:-⏳}"
    local stage4_status="${8:-⏳}"
    
    echo -e "${CYAN}📊 PROGRESS: Stages $stages | Target: $directory | Workflow: ${git_command:-default}${NC}"
    echo
    echo -e "${BLUE}🔄 CURRENT STATUS${NC}"
    
    # Stage 1 display
    if [[ " $stages " =~ " 1 " ]]; then
        echo -e "├─ $stage1_status Stage 1: Basic Review"
    fi
    
    # Stage 2 display
    if [[ " $stages " =~ " 2 " ]]; then
        echo -e "├─ $stage2_status Stage 2: Core Quality (3 parallel reviewers)"
        if [[ "$current_stage" -ge 2 ]]; then
            echo -e "│  ├─ ${STAGE2_READ_EMOJI} Readability"
            echo -e "│  ├─ ${STAGE2_QUAL_EMOJI} Quality"
            echo -e "│  └─ ${STAGE2_SEC_EMOJI} Security"
        fi
    fi
    
    # Stage 3 display
    if [[ " $stages " =~ " 3 " ]]; then
        echo -e "├─ $stage3_status Stage 3: Advanced Validation (2 parallel reviewers)"
        if [[ "$current_stage" -ge 3 ]]; then
            echo -e "│  ├─ ${STAGE3_DESIGN_EMOJI} Design & Accessibility"
            echo -e "│  └─ ${STAGE3_TEST_EMOJI} Testing"
        fi
    fi
    
    # Stage 4 display
    if [[ " $stages " =~ " 4 " ]]; then
        echo -e "└─ $stage4_status Stage 4: Merge Readiness"
        if [[ "$current_stage" -ge 4 ]]; then
            echo -e "   ├─ ${STAGE4_E2E_EMOJI} E2E Validation"
            echo -e "   └─ ${STAGE4_FINAL_EMOJI} Final Readiness Check"
        fi
    fi
    
    echo
}

# Function to execute stage 1: Basic Validation
execute_stage1() {
    local directory="$1"
    echo -e "${YELLOW}${STAGE1_EMOJI} Stage 1: Basic Review - Anti-patterns and critical errors${NC}"
    
    # Create the reviewer prompt
    local prompt="$(cat <<EOF
TARGET_DIRECTORY: ${directory}
WORKFLOW_STAGE: add
TASK: Review the code in ${directory} for basic issues, anti-patterns, and critical errors.

INSTRUCTIONS:
1. **Analyze**: Scan for common mistakes, lint violations, type errors
2. **Fix**: Use Edit tool to automatically fix issues
3. **Validate**: Re-check the code after applying fixes
4. **Report**: Provide summary of issues found and fixed

Focus on critical issues that would prevent staging:
- Console.log statements
- Eslint-disable without comments
- TypeScript 'any' types
- Unused imports/variables
- Syntax errors
- Failing tests

If critical issues found: Stop and require manual fix
If passed: Approve for git add
EOF
)"
    
    # Execute the reviewer
    if ! command -v "$CLAUDE_COMMAND" >/dev/null 2>&1; then
        echo -e "${RED}❌ $CLAUDE_COMMAND command not found. Please install Claude CLI${NC}"
        return 1
    fi
    
    "$CLAUDE_COMMAND" -p "$prompt" 2>/dev/null || {
        echo -e "${RED}❌ Stage 1 failed with critical issues${NC}"
        return 1
    }
    
    echo -e "${GREEN}✅ Stage 1: Basic validation passed${NC}"
    return 0
}

# Function to execute stage 2: Core Quality (3 parallel reviewers)
execute_stage2() {
    local directory="$1"
    echo -e "${GREEN}${STAGE2_READ_EMOJI}${BLUE}${STAGE2_QUAL_EMOJI}${RED}${STAGE2_SEC_EMOJI}${NC} Stage 2: Core Quality - Readability, Quality, Security (3 Parallel)"
    
    # Readability reviewer
    local readability_prompt="$(cat <<EOF
TARGET_DIRECTORY: ${directory}
WORKFLOW_STAGE: commit
TASK: Review code readability and developer experience before committing.

INSTRUCTIONS:
1. **Analyze**: Check naming, structure, documentation
2. **Fix**: Apply readability improvements automatically  
3. **Validate**: Ensure fixes improve code clarity
4. **Report**: Document readability improvements made
EOF
)"
    
    # Quality reviewer
    local quality_prompt="$(cat <<EOF
TARGET_DIRECTORY: ${directory}
WORKFLOW_STAGE: commit
TASK: Review code quality, TypeScript best practices, and logic before committing.

INSTRUCTIONS:
1. **Analyze**: Check patterns, architecture, logic correctness
2. **Fix**: Apply quality improvements automatically
3. **Validate**: Ensure fixes maintain functionality
4. **Report**: Document quality improvements made
EOF
)"
    
    # Security reviewer
    local security_prompt="$(cat <<EOF
TARGET_DIRECTORY: ${directory}
WORKFLOW_STAGE: commit  
TASK: Review security vulnerabilities and safe coding practices before committing.

INSTRUCTIONS:
1. **Analyze**: Scan for security vulnerabilities
2. **Fix**: Apply security fixes automatically where safe
3. **Validate**: Ensure fixes don't break functionality
4. **Report**: Document security improvements made
EOF
)"
    
    # Execute all 3 reviewers in parallel
    "$CLAUDE_COMMAND" -p "$readability_prompt" 2>/dev/null &
    local readability_pid=$!
    
    "$CLAUDE_COMMAND" -p "$quality_prompt" 2>/dev/null &
    local quality_pid=$!
    
    "$CLAUDE_COMMAND" -p "$security_prompt" 2>/dev/null &
    local security_pid=$!
    
    # Wait for all to complete and track failures
    local failed_processes=()
    
    if ! wait $readability_pid; then
        failed_processes+=("readability")
    fi
    
    if ! wait $quality_pid; then
        failed_processes+=("quality")
    fi
    
    if ! wait $security_pid; then
        failed_processes+=("security")
    fi
    
    if [ ${#failed_processes[@]} -gt 0 ]; then
        echo -e "${RED}❌ Failed processes: ${failed_processes[*]}${NC}"
        return 1
    fi
    
    echo -e "${GREEN}✅ Stage 2: Core quality checks passed${NC}"
    return 0
}

# Function to execute stage 3: Advanced Validation
execute_stage3() {
    local directory="$1"
    echo -e "${PURPLE}${STAGE3_DESIGN_EMOJI}${CYAN}${STAGE3_TEST_EMOJI}${NC} Stage 3: Advanced Validation - Design, Testing (2 Parallel)"
    
    # Design reviewer
    local design_prompt="$(cat <<EOF
TARGET_DIRECTORY: ${directory}
WORKFLOW_STAGE: push
TASK: Review UI/UX design, accessibility, and visual consistency before pushing.

INSTRUCTIONS:
1. **Analyze**: Check for accessibility and design consistency
2. **Fix**: Apply design and accessibility improvements
3. **Validate**: Verify improvements enhance user experience
4. **Report**: Document design improvements made
EOF
)"
    
    # Testing reviewer
    local testing_prompt="$(cat <<EOF
TARGET_DIRECTORY: ${directory}
WORKFLOW_STAGE: push
TASK: Review test effectiveness, coverage, and quality before pushing.

INSTRUCTIONS:
1. **Analyze**: Check test effectiveness and coverage
2. **Fix**: Improve tests and add missing test cases
3. **Validate**: Ensure tests actually validate functionality
4. **Report**: Document testing improvements made
EOF
)"
    
    # Execute both reviewers in parallel
    "$CLAUDE_COMMAND" -p "$design_prompt" 2>/dev/null &
    local design_pid=$!
    
    "$CLAUDE_COMMAND" -p "$testing_prompt" 2>/dev/null &
    local testing_pid=$!
    
    # Wait for both to complete and track failures
    local failed_processes=()
    
    if ! wait $design_pid; then
        failed_processes+=("design")
    fi
    
    if ! wait $testing_pid; then
        failed_processes+=("testing")
    fi
    
    if [ ${#failed_processes[@]} -gt 0 ]; then
        echo -e "${RED}❌ Failed processes: ${failed_processes[*]}${NC}"
        return 1
    fi
    
    echo -e "${GREEN}✅ Stage 3: Advanced validation passed${NC}"
    return 0
}

# Function to execute stage 4: Merge Readiness
execute_stage4() {
    local directory="$1"
    echo -e "${BLUE}${STAGE4_E2E_EMOJI}${YELLOW}${STAGE4_FINAL_EMOJI}${NC} Stage 4: Merge Readiness - E2E validation and final checks (2 Parallel)"
    
    # E2E reviewer
    local e2e_prompt="$(cat <<EOF
TARGET_DIRECTORY: ${directory}
WORKFLOW_STAGE: merge
TASK: Perform comprehensive end-to-end validation before merging to main.

INSTRUCTIONS:
1. **Analyze**: Test complete user flows and API endpoints
2. **Fix**: Address any integration issues found
3. **Validate**: Ensure end-to-end functionality works perfectly
4. **Report**: Document comprehensive integration validation results
EOF
)"
    
    # Final readiness check
    local final_prompt="$(cat <<EOF
WORKFLOW_STAGE: merge
TASK: Verify code is ready for merge to main branch.

INSTRUCTIONS:
1. **Documentation**: Ensure all changes are properly documented
2. **Integration**: Verify all components work together
3. **Standards**: Confirm code meets production standards
4. **Approval**: Provide merge recommendation

MERGE CHECKLIST:
- All previous stages passed ✅
- E2E validation completed ✅
- Documentation updated ✅
- Breaking changes documented ✅
- Backward compatibility verified ✅
- Performance impact assessed ✅
- Security review completed ✅

FINAL DECISION: Approve/Reject merge to main
EOF
)"
    
    # Execute both reviewers in parallel
    "$CLAUDE_COMMAND" -p "$e2e_prompt" 2>/dev/null &
    local e2e_pid=$!
    
    "$CLAUDE_COMMAND" -p "$final_prompt" 2>/dev/null &
    local final_pid=$!
    
    # Wait for both to complete and track failures
    local failed_processes=()
    
    if ! wait $e2e_pid; then
        failed_processes+=("e2e")
    fi
    
    if ! wait $final_pid; then
        failed_processes+=("final")
    fi
    
    if [ ${#failed_processes[@]} -gt 0 ]; then
        echo -e "${RED}❌ Failed processes: ${failed_processes[*]}${NC}"
        return 1
    fi
    
    echo -e "${GREEN}✅ Stage 4: Merge readiness validated${NC}"
    return 0
}

# Function to execute git command after successful validation
execute_git_command() {
    local git_command="$1"
    local directory="$2"
    
    case "$git_command" in
        "add")
            echo -e "${GREEN}✅ Stage 1 passed! Executing: git add .${NC}"
            git add .
            if command -v "${NOTIFICATION_SCRIPT:-/Users/adammanuel/.claude/tools/send-notification.sh}" >/dev/null 2>&1; then
                "${NOTIFICATION_SCRIPT:-/Users/adammanuel/.claude/tools/send-notification.sh}" "review-orchestrator" "📢 Files Staged - ✅ Basic validation passed - files added to staging"
            fi
            ;;
        "commit")
            local commit_message=$(cat <<'EOF'
feat: automated code improvements

- Fixed basic issues (console.logs, unused imports, type errors)
- Improved code readability (naming, structure, documentation)  
- Applied TypeScript and quality fixes
- Resolved security vulnerabilities

🤖 Generated with Claude Code

Co-authored-by: Review-Orchestrator <review-orchestrator@ai>
EOF
)
            
            echo -e "${GREEN}✅ Stages 1-2 passed! Executing: git commit${NC}"
            git commit -m "$commit_message"
            if command -v "${NOTIFICATION_SCRIPT:-/Users/adammanuel/.claude/tools/send-notification.sh}" >/dev/null 2>&1; then
                "${NOTIFICATION_SCRIPT:-/Users/adammanuel/.claude/tools/send-notification.sh}" "review-orchestrator" "📢 Committed - ✅ Code quality validated - changes committed"
            fi
            ;;
        "push")
            local branch_name=$(git branch --show-current)
            echo -e "${GREEN}✅ Stages 1-3 passed! Executing: git push origin $branch_name${NC}"
            git push origin "$branch_name"
            if command -v "${NOTIFICATION_SCRIPT:-/Users/adammanuel/.claude/tools/send-notification.sh}" >/dev/null 2>&1; then
                "${NOTIFICATION_SCRIPT:-/Users/adammanuel/.claude/tools/send-notification.sh}" "review-orchestrator" "📢 Pushed - ✅ Full validation passed - code pushed to remote"
            fi
            ;;
        "merge")
            echo -e "${CYAN}🎯 Code is ready for merge to main branch${NC}"
            echo -e "${CYAN}📋 All quality gates passed - manual merge approval recommended${NC}"
            if command -v "${NOTIFICATION_SCRIPT:-/Users/adammanuel/.claude/tools/send-notification.sh}" >/dev/null 2>&1; then
                "${NOTIFICATION_SCRIPT:-/Users/adammanuel/.claude/tools/send-notification.sh}" "review-orchestrator" "📢 Ready for Merge - ✅ Complete review passed - ready for main branch"
            fi
            ;;
    esac
}

# Validate git repository
validate_git_repo() {
    if ! git rev-parse --git-dir >/dev/null 2>&1; then
        echo -e "${RED}❌ Not in a git repository${NC}"
        return 1
    fi
    
    if [ ! -d "$1" ]; then
        echo -e "${RED}❌ Directory $1 does not exist${NC}"
        return 1
    fi
    
    return 0
}

# Main execution
main() {
    local args="$*"
    
    # Parse command
    IFS='|' read -r git_command directory stages <<< "$(parse_command "$args")"
    
    # Validate environment
    if ! validate_git_repo "$directory"; then
        exit 1
    fi
    
    # Show header
    show_header "${git_command:-default}"
    
    # Convert stages string to array
    IFS=' ' read -ra stages_array <<< "$stages"
    
    # Initialize status variables
    local stage1_status="⏳"
    local stage2_status="⏳"
    local stage3_status="⏳"
    local stage4_status="⏳"
    local current_stage=0
    
    # Show initial progress
    show_progress "$stages" "$directory" "$git_command" "$current_stage" "$stage1_status" "$stage2_status" "$stage3_status" "$stage4_status"
    
    # Execute stages
    for stage in "${stages_array[@]}"; do
        current_stage=$stage
        
        case $stage in
            1)
                if execute_stage1 "$directory"; then
                    stage1_status="✅"
                else
                    stage1_status="❌"
                    echo -e "${RED}❌ Stage 1 failed - manual intervention required${NC}"
                    exit 1
                fi
                ;;
            2)
                show_progress "$stages" "$directory" "$git_command" "$current_stage" "$stage1_status" "🔄" "$stage3_status" "$stage4_status"
                if execute_stage2 "$directory"; then
                    stage2_status="✅"
                else
                    stage2_status="❌"
                    echo -e "${RED}❌ Stage 2 failed - manual intervention required${NC}"
                    exit 1
                fi
                ;;
            3)
                show_progress "$stages" "$directory" "$git_command" "$current_stage" "$stage1_status" "$stage2_status" "🔄" "$stage4_status"
                if execute_stage3 "$directory"; then
                    stage3_status="✅"
                else
                    stage3_status="❌"
                    echo -e "${RED}❌ Stage 3 failed - manual intervention required${NC}"
                    exit 1
                fi
                ;;
            4)
                show_progress "$stages" "$directory" "$git_command" "$current_stage" "$stage1_status" "$stage2_status" "$stage3_status" "🔄"
                if execute_stage4 "$directory"; then
                    stage4_status="✅"
                else
                    stage4_status="❌"
                    echo -e "${RED}❌ Stage 4 failed - manual intervention required${NC}"
                    exit 1
                fi
                ;;
        esac
        
        # Update progress display
        show_progress "$stages" "$directory" "$git_command" "$current_stage" "$stage1_status" "$stage2_status" "$stage3_status" "$stage4_status"
    done
    
    # Execute git command if specified
    if [[ -n "$git_command" ]]; then
        execute_git_command "$git_command" "$directory"
    fi
    
    # Show final summary
    echo
    echo -e "${GREEN}✅ Review Complete - ${git_command:-default} workflow${NC}"
    echo
    echo -e "${BLUE}${git_command^:-Default} Review Summary:${NC}"
    echo "─────────────────────────"
    
    for stage in "${stages_array[@]}"; do
        case $stage in
            1) echo -e "basic: Fixed critical issues ✅" ;;
            2) echo -e "quality: Fixed TypeScript issues ✅"
               echo -e "readability: Fixed naming issues ✅"
               echo -e "security: Fixed vulnerabilities ✅" ;;
            3) echo -e "design: Improved accessibility ✅"
               echo -e "testing: Enhanced test coverage ✅" ;;
            4) echo -e "e2e: Validated user flows ✅"
               echo -e "merge: Ready for production ✅" ;;
        esac
    done
    
    echo
    if [[ -n "$git_command" ]]; then
        echo -e "${CYAN}🎯 Executed: git $git_command${NC}"
    fi
    echo -e "${CYAN}🚀 Workflow step completed successfully!${NC}"
}

# Execute main function with all arguments
main "$@"